// Time complexity : O(m*(m+n), Auxiliary space complexity O(1) 
// m = Size of array 1, n = size of array 2

class PrepInsta {

    // Time complexity : O(m*(m+n), Auxiliary space complexity O(1)
    // m = Size of array 1, n = size of array 2
    public static void main(String[] args) {
        int[] arr1 = {
            5,
            8,
            5,
            7,
            8,
            10
        };
        int[] arr2 = {
            1,
            5,
            5,
            8,
            1,
            8,
            7
        };
        ArrayList < Integer > result = new ArrayList < > ();

        int size1 = arr1.length;
        int size2 = arr2.length;
        System.out.println(getIntersection(arr1, arr2, size1, size2, result));

    }

    // Note : Ideally the question comes to print number of common elements
    // But, we have made it a little more complicated by forcefully asking user to pass
    // the array back to main function and print common elements
    // We have passed ArrayList to demonstrate how ArrayList can be passed but,
    // You can pass array too, back to the main function
    // If you just need to print the count, don't pass ArrayList but, pass count,
    // just increment the count Whenever, we are add to ArrayList

    static ArrayList < Integer > getIntersection(int[] arr1, int[] arr2, int size1, int size2, ArrayList < Integer > result) {
        int count = 0;

        for (int i = 0; i < size1; i++) {
            int flag = 0;

            for (int j = i + 1; j < size1; j++) {
                if (arr1[i] == arr1[j]) {
                    flag = 1;
                    break;
                }
            }
            if (flag == 1)
                continue;

            for (int j = 0; j < size2; j++) {
                if (arr1[i] == arr2[j]) {
                    result.add(arr1[i]);
                    break;
                }

            }
        }
        return result;

    }
}
Overall Course Completion percentage